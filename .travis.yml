# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

sudo: false

addons:
    apt:
        packages:
            - graphviz
            - texlive-latex-extra
            - dvipng

env:
    global:
        - SETUP_CMD='test'
        - TEST_CMD='py.test test_env.py'
        - PYTHON_VERSION=3.5

    matrix:
        - SETUP_CMD='egg_info'
          TEST_CMD='python --version'

        - SETUP_CMD='test'

matrix:
    include:

        # Starting with the dev versions as they take the longest to run. We
        # deliberately test with Numpy 1.9 to check that installing Astropy dev
        # doesn't upgrade Numpy.
        - os: linux
          env: SETUP_CMD='test' NUMPY_VERSION=1.9 ASTROPY_VERSION=dev

        # For the Numpy dev build, we also specify a conda package that depends
        # on Numpy to make sure that Numpy dev is used (because conda will also
        # install Numpy stable). It's also important to include scipy here to
        # make sure that scipy routines still work correctly, because if we
        # aren't careful, we can end up with issues with the math kernel
        # library.

        - os: linux
          env: SETUP_CMD='test' NUMPY_VERSION=dev
               CONDA_DEPENDENCIES='scipy'

        # The pre build only should run to the testing phase if a pre
        # release is available for numpy on pypi, otherwise it should pass
        - os: linux
          env: SETUP_CMD='test' NUMPY_VERSION=pre
               CONDA_DEPENDENCIES='scipy' DEBUG=True

        # The pre build only should run to the testing phase if a pre
        # release is available for astropy on pypi, otherwise it should pass
        - os: linux
          env: SETUP_CMD='test' ASTROPY_VERSION=pre DEBUG=True

        - os: linux
          env: SETUP_CMD='build_sphinx' CONDA_DEPENDENCIES='matplotlib<=1.5.0'
               DEBUG=True
               TEST_CMD='python -c "import matplotlib; assert matplotlib.__version__=="\""1.5.0"\"'

        - os: linux
          env: SETUP_CMD='build_sphinx' SPHINX_VERSION=1.4.1 DEBUG=True
               MATPLOTLIB_VERSION=1.4 DEBUG=True
               TEST_CMD='python -c "import sphinx; assert sphinx.__version__==\"1.4.1\"; import matplotlib; assert matplotlib.__version__=="\""1.4.3"\"'

        - os: linux
          env: SETUP_CMD='test' CONDA_DEPENDENCIES='matplotlib=1.5.0 sphinx'
               MATPLOTLIB_VERSION=1.5.1 DEBUG=True
               TEST_CMD='python -c "import matplotlib; assert matplotlib.__version__=="\""1.5.1"\"'

        - os: linux
          env: SETUP_CMD='build_docs' PYTHON_VERSION=2.7

        - os: linux
          env: MAIN_CMD='pep8'
               TEST_CMD='pep8 --version'

        - os: linux
          env: MAIN_CMD='pycodestyle'
               TEST_CMD='pycodestyle --version'

        - os: osx
          env: SETUP_CMD='test' ASTROPY_VERSION=LTS
               CONDA_DEPENDENCIES='requests'

        # Note that setting CONDA_CHANNEL_PRIORITY to False here is unrelated
        # to the rest of the build and won't change anything, except that we can
        # make sure the conda config was correctly updated.
        - os: linux
          env: SETUP_CMD='test' NUMPY_VERSION=1.10 DEBUG=True
               SCIKIT_IMAGE_VERSION=0.11
               CONDA_DEPENDENCIES='Cython numpy scikit-image'
               CONDA_CHANNEL_PRIORITY=False

        # Note that setting CONDA_CHANNEL_PRIORITY to True here is unrelated
        # to the rest of the build and won't change anything, except that we can
        # make sure the conda config was correctly updated.
        - os: linux
          env: SETUP_CMD='test' ASTROPY_VERSION=stable CONDA_CHANNEL_PRIORITY=True

        - os: linux
          env: SETUP_CMD='test' NUMPY_VERSION=stable
               CONDA_DEPENDENCIES='jinja2=2.8' DEBUG=True

        - os: linux
          env: SETUP_CMD='test' NUMPY_VERSION=1.9 ASTROPY_VERSION=1.0
               CONDA_DEPENDENCIES='matplotlib h5py'
               PIP_DEPENDENCIES='astrodendro'

        - os: linux
          env: SETUP_CMD='test' CONDA_DEPENDENCIES='matplotlib=1.5'
               TEST_CMD='python -c "import matplotlib; assert int(matplotlib.__version__[-1])>0"'

        - os: linux
          env: SETUP_CMD='test --parallel'
               TEST_CMD='py.test -n 4 test_env.py'

        - os: linux
          env: SETUP_CMD='test --open-files'

        - os: linux
          env: SETUP_CMD='test --coverage' PYTHON_VERSION=2.7
               TEST_CMD='coverage run test_env.py'
               CONDA_CHANNELS='astropy-ci-extras astrofrog conda-forge'
               CONDA_DEPENDENCIES='pyqt5' DEBUG=True
               NUMPY_VERSION=1.10 ASTROPY_VERSION=lts

        - os: linux
          env: SETUP_CMD='test' CONDA_DEPENDENCIES='matplotlib' CONDA_DEPENDENCIES_FLAGS='--no-deps'

        - os: linux
          env: SETUP_CMD='test' PIP_DEPENDENCIES='pyparsing requests' PIP_DEPENDENCIES_FLAGS='--log pip_install.log'

before_install:
    - ln -s . ci-helpers
    - source ci-helpers/travis/setup_conda.sh

script:
   - eval $TEST_CMD
   - if [[ $SETUP_CMD == *coverage* ]]; then coveralls; fi
